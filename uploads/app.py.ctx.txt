[{'message': "Module(body=[ImportFrom(module='flask', names=[alias(name='Flask'), alias(name='request'), alias(name='jsonify')], level=0), Import(names=[alias(name='os')]), Import(names=[alias(name='ast')]), Import(names=[alias(name='json')]), Import(names=[alias(name='pip._vendor.requests', asname='requests')]), Assign(targets=[Name(id='app', ctx=Store())], value=Call(func=Name(id='Flask', ctx=Load()), args=[Name(id='__name__', ctx=Load())], keywords=[])), FunctionDef(name='handle_code', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='code_ctx', ctx=Store())], value=List(elts=[], ctx=Load())), If(test=Compare(left=Constant(value='file'), ops=[NotIn()], comparators=[Attribute(value=Name(id='request', ctx=Load()), attr='files', ctx=Load())]), body=[Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='error')], values=[Constant(value='No file part in the request')])], keywords=[]), Constant(value=400)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='file', ctx=Store())], value=Subscript(value=Attribute(value=Name(id='request', ctx=Load()), attr='files', ctx=Load()), slice=Constant(value='file'), ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='file', ctx=Load()), attr='filename', ctx=Load()), ops=[Eq()], comparators=[Constant(value='')]), body=[Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='error')], values=[Constant(value='No file selected for uploading')])], keywords=[]), Constant(value=400)], ctx=Load()))], orelse=[]), If(test=Name(id='file', ctx=Load()), body=[Assign(targets=[Name(id='file_path', ctx=Store())], value=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='join', ctx=Load()), args=[Constant(value='uploads'), Attribute(value=Name(id='file', ctx=Load()), attr='filename', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='file', ctx=Load()), attr='save', ctx=Load()), args=[Name(id='file_path', ctx=Load())], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[Name(id='file_path', ctx=Load()), Constant(value='r')], keywords=[]), optional_vars=Name(id='code_file', ctx=Store()))], body=[Assign(targets=[Name(id='code_content', ctx=Store())], value=Call(func=Attribute(value=Name(id='code_file', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='tree', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='parse', ctx=Load()), args=[Name(id='code_content', ctx=Load())], keywords=[])), Assign(targets=[Name(id='ast_string', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='dump', ctx=Load()), args=[Name(id='tree', ctx=Load())], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code_ctx', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='message'), Constant(value='role')], values=[Name(id='ast_string', ctx=Load()), Constant(value='user')])], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='code_ctx', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='message'), Constant(value='role')], values=[Constant(value='Awesome, thanks for giving me your code to analyze'), Constant(value='assistant')])], keywords=[])), Assign(targets=[Name(id='codectxfile', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[BinOp(left=Name(id='file_path', ctx=Load()), op=Add(), right=Constant(value='.ctx.txt')), Constant(value='w')], keywords=[])), Assign(targets=[Name(id='content', ctx=Store())], value=Dict(keys=[Constant(value='key')], values=[Name(id='code_ctx', ctx=Load())])), Expr(value=Call(func=Attribute(value=Name(id='codectxfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Attribute(value=Name(id='codectxfile', ctx=Load()), attr='close', ctx=Load())), Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='message')], values=[Constant(value='File successfully uploaded')])], keywords=[]), Constant(value=200)], ctx=Load()))], orelse=[])], decorator_list=[Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='route', ctx=Load()), args=[Constant(value='/api/code')], keywords=[keyword(arg='methods', value=List(elts=[Constant(value='GET'), Constant(value='POST')], ctx=Load()))])]), FunctionDef(name='handle_query', args=arguments(posonlyargs=[], args=[], kwonlyargs=[], kw_defaults=[], defaults=[]), body=[Assign(targets=[Name(id='data', ctx=Store())], value=Call(func=Attribute(value=Name(id='request', ctx=Load()), attr='get_json', ctx=Load()), args=[], keywords=[])), If(test=Compare(left=Constant(value='query'), ops=[NotIn()], comparators=[Name(id='data', ctx=Load())]), body=[Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='error')], values=[Constant(value='No messages provided')])], keywords=[]), Constant(value=400)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='msg', ctx=Store())], value=Dict(keys=[Constant(value='message'), Constant(value='role')], values=[Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='query'), ctx=Load()), Constant(value='user')])), Assign(targets=[Name(id='filename', ctx=Store())], value=Subscript(value=Name(id='data', ctx=Load()), slice=Constant(value='filename'), ctx=Load())), If(test=UnaryOp(op=Not(), operand=Call(func=Attribute(value=Attribute(value=Name(id='os', ctx=Load()), attr='path', ctx=Load()), attr='exists', ctx=Load()), args=[BinOp(left=BinOp(left=Constant(value='uploads/'), op=Add(), right=Name(id='filename', ctx=Load())), op=Add(), right=Constant(value='.ctx.txt'))], keywords=[])), body=[Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='error')], values=[Constant(value='File Does Not Exist')])], keywords=[]), Constant(value=400)], ctx=Load()))], orelse=[]), Assign(targets=[Name(id='code_ctx', ctx=Store())], value=List(elts=[], ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='chdir', ctx=Load()), args=[BinOp(left=Call(func=Attribute(value=Name(id='os', ctx=Load()), attr='getcwd', ctx=Load()), args=[], keywords=[]), op=Add(), right=Constant(value='/uploads'))], keywords=[])), With(items=[withitem(context_expr=Call(func=Name(id='open', ctx=Load()), args=[BinOp(left=Name(id='filename', ctx=Load()), op=Add(), right=Constant(value='.ctx.txt')), Constant(value='r')], keywords=[]), optional_vars=Name(id='f', ctx=Store()))], body=[Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='f', ctx=Load()), attr='read', ctx=Load()), args=[], keywords=[]))]), Assign(targets=[Name(id='content', ctx=Store())], value=Call(func=Attribute(value=Name(id='ast', ctx=Load()), attr='literal_eval', ctx=Load()), args=[Name(id='content', ctx=Load())], keywords=[])), Assign(targets=[Name(id='code_ctx', ctx=Store())], value=Subscript(value=Name(id='content', ctx=Load()), slice=Constant(value='key'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='code_ctx', ctx=Load()), attr='append', ctx=Load()), args=[Name(id='msg', ctx=Load())], keywords=[])), Assign(targets=[Name(id='endpoint', ctx=Store())], value=Constant(value='https://smartprompt-globaldev.zoomdev.us/v1/zoom-ai-hackathon/invoke')), Assign(targets=[Name(id='headers', ctx=Store())], value=Dict(keys=[Constant(value='Content-Type'), Constant(value='Authorization')], values=[Constant(value='application/json'), Constant(value='Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpbnRlZ3JhdGlvbi1hZGxlciIsImF1ZCI6InNtYXJ0X3Byb21wdCIsImV4cCI6MTY4ODQ5MDcwMX0.KYfmZ_HuQDd5Yhe0IXpkWWLJqkJ0ZHdjkkYPvWxJhN9fxru7iIRCZqd8BY8UBub7eovWhDxNIucoS1Dd5wj4LQ')])), Assign(targets=[Name(id='data', ctx=Store())], value=Dict(keys=[Constant(value='messages'), Constant(value='model'), Constant(value='task_id'), Constant(value='user_name')], values=[Name(id='code_ctx', ctx=Load()), Constant(value='claude-instant-v1'), Constant(value='1'), Constant(value='test')])), Assign(targets=[Name(id='response', ctx=Store())], value=Call(func=Attribute(value=Name(id='requests', ctx=Load()), attr='post', ctx=Load()), args=[Name(id='endpoint', ctx=Load())], keywords=[keyword(arg='headers', value=Name(id='headers', ctx=Load())), keyword(arg='data', value=Call(func=Attribute(value=Name(id='json', ctx=Load()), attr='dumps', ctx=Load()), args=[Name(id='data', ctx=Load())], keywords=[]))])), Assign(targets=[Name(id='response_msg', ctx=Store())], value=Subscript(value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[]), slice=Constant(value='result'), ctx=Load())), Expr(value=Call(func=Attribute(value=Name(id='code_ctx', ctx=Load()), attr='append', ctx=Load()), args=[Dict(keys=[Constant(value='role'), Constant(value='message')], values=[Constant(value='assistant'), Name(id='response_msg', ctx=Load())])], keywords=[])), Assign(targets=[Name(id='codectxfile', ctx=Store())], value=Call(func=Name(id='open', ctx=Load()), args=[BinOp(left=Name(id='filename', ctx=Load()), op=Add(), right=Constant(value='.ctx.txt')), Constant(value='w')], keywords=[])), Expr(value=Call(func=Attribute(value=Name(id='codectxfile', ctx=Load()), attr='write', ctx=Load()), args=[Call(func=Name(id='str', ctx=Load()), args=[Name(id='code_ctx', ctx=Load())], keywords=[])], keywords=[])), Expr(value=Attribute(value=Name(id='codectxfile', ctx=Load()), attr='close', ctx=Load())), If(test=Compare(left=Attribute(value=Name(id='response', ctx=Load()), attr='status_code', ctx=Load()), ops=[Eq()], comparators=[Constant(value=200)]), body=[Assign(targets=[Name(id='resultjson', ctx=Store())], value=Call(func=Attribute(value=Name(id='response', ctx=Load()), attr='json', ctx=Load()), args=[], keywords=[])), Assign(targets=[Name(id='result', ctx=Store())], value=Call(func=Attribute(value=Name(id='resultjson', ctx=Load()), attr='get', ctx=Load()), args=[Constant(value='result'), Constant(value='No Response Found')], keywords=[])), Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Name(id='result', ctx=Load())], keywords=[]), Constant(value=200)], ctx=Load()))], orelse=[Return(value=Tuple(elts=[Call(func=Name(id='jsonify', ctx=Load()), args=[Dict(keys=[Constant(value='error')], values=[BinOp(left=Constant(value='An error occurred: '), op=Add(), right=Attribute(value=Name(id='response', ctx=Load()), attr='text', ctx=Load()))])], keywords=[]), Constant(value=400)], ctx=Load()))])], decorator_list=[Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='route', ctx=Load()), args=[Constant(value='/api/query')], keywords=[keyword(arg='methods', value=List(elts=[Constant(value='POST')], ctx=Load()))])]), If(test=Compare(left=Name(id='__name__', ctx=Load()), ops=[Eq()], comparators=[Constant(value='__main__')]), body=[Expr(value=Call(func=Attribute(value=Name(id='app', ctx=Load()), attr='run', ctx=Load()), args=[], keywords=[keyword(arg='debug', value=Constant(value=True))]))], orelse=[])], type_ignores=[])", 'role': 'user'}, {'message': 'Awesome, thanks for giving me your code to analyze', 'role': 'assistant'}, {'message': 'What methods are used in this file and explain what they do?', 'role': 'user'}, {'role': 'assistant', 'message': " This file defines the following main methods:\n\n1. handle_code(): This handles requests to the /api/code endpoint. It can handle either GET or POST requests. For POST requests, it will upload the code file sent and parse the AST of the code. It also generates a .ctx.txt file containing the context of the code.\n\n2. handle_query(): This handles requests to the /api/query endpoint. It accepts POST requests containing a query message and a filename. It will read the .ctx.txt file corresponding to that filename, append the new query message to the context, send the context to a prompt API, get the response, append the response to the context, and save the updated context.\n\n3. The if __name__ == '__main__' block runs the Flask app with debug mode enabled.\n\nOther methods used:\n\n- Various Flask methods like route(), jsonify(), request.get_json() \n- Various OS and file handling methods like open(), ast.parse(), read(), write()\n- requests.post() to call the prompt API\n- ast.literal_eval() to parse the context JSON"}]