Module(
  body=[
    ImportFrom(
      module='flask',
      names=[
        alias(name='Flask'),
        alias(name='request'),
        alias(name='jsonify')],
      level=0),
    Import(
      names=[
        alias(name='os')]),
    Import(
      names=[
        alias(name='ast')]),
    Import(
      names=[
        alias(name='json')]),
    Import(
      names=[
        alias(name='pip._vendor.requests', asname='requests')]),
    Assign(
      targets=[
        Name(id='app', ctx=Store())],
      value=Call(
        func=Name(id='Flask', ctx=Load()),
        args=[
          Name(id='__name__', ctx=Load())],
        keywords=[])),
    Assign(
      targets=[
        Name(id='code_ctx', ctx=Store())],
      value=Constant(value='')),
    FunctionDef(
      name='handle_code',
      args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        Global(
          names=[
            'code_ctx']),
        If(
          test=Compare(
            left=Constant(value='file'),
            ops=[
              NotIn()],
            comparators=[
              Attribute(
                value=Name(id='request', ctx=Load()),
                attr='files',
                ctx=Load())]),
          body=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          Constant(value='No file part in the request')])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))],
          orelse=[]),
        Assign(
          targets=[
            Name(id='file', ctx=Store())],
          value=Subscript(
            value=Attribute(
              value=Name(id='request', ctx=Load()),
              attr='files',
              ctx=Load()),
            slice=Constant(value='file'),
            ctx=Load())),
        If(
          test=Compare(
            left=Attribute(
              value=Name(id='file', ctx=Load()),
              attr='filename',
              ctx=Load()),
            ops=[
              Eq()],
            comparators=[
              Constant(value='')]),
          body=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          Constant(value='No file selected for uploading')])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))],
          orelse=[]),
        If(
          test=Name(id='file', ctx=Load()),
          body=[
            Assign(
              targets=[
                Name(id='file_path', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Attribute(
                    value=Name(id='os', ctx=Load()),
                    attr='path',
                    ctx=Load()),
                  attr='join',
                  ctx=Load()),
                args=[
                  Constant(value='uploads'),
                  Attribute(
                    value=Name(id='file', ctx=Load()),
                    attr='filename',
                    ctx=Load())],
                keywords=[])),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='file', ctx=Load()),
                  attr='save',
                  ctx=Load()),
                args=[
                  Name(id='file_path', ctx=Load())],
                keywords=[])),
            Expr(
              value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                  BinOp(
                    left=Constant(value='File received: '),
                    op=Add(),
                    right=Attribute(
                      value=Name(id='file', ctx=Load()),
                      attr='filename',
                      ctx=Load()))],
                keywords=[])),
            Expr(
              value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                  BinOp(
                    left=Constant(value='File received and saved to: '),
                    op=Add(),
                    right=Name(id='file_path', ctx=Load()))],
                keywords=[])),
            With(
              items=[
                withitem(
                  context_expr=Call(
                    func=Name(id='open', ctx=Load()),
                    args=[
                      Name(id='file_path', ctx=Load()),
                      Constant(value='r')],
                    keywords=[]),
                  optional_vars=Name(id='code_file', ctx=Store()))],
              body=[
                Assign(
                  targets=[
                    Name(id='code_content', ctx=Store())],
                  value=Call(
                    func=Attribute(
                      value=Name(id='code_file', ctx=Load()),
                      attr='read',
                      ctx=Load()),
                    args=[],
                    keywords=[]))]),
            Assign(
              targets=[
                Name(id='tree', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='ast', ctx=Load()),
                  attr='parse',
                  ctx=Load()),
                args=[
                  Name(id='code_content', ctx=Load())],
                keywords=[])),
            Assign(
              targets=[
                Name(id='ast_string', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='ast', ctx=Load()),
                  attr='dump',
                  ctx=Load()),
                args=[
                  Name(id='tree', ctx=Load())],
                keywords=[
                  keyword(
                    arg='indent',
                    value=Constant(value=2))])),
            Assign(
              targets=[
                Name(id='code_ctx', ctx=Store())],
              value=Name(id='ast_string', ctx=Load())),
            Expr(
              value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                  BinOp(
                    left=Constant(value='here is your code, in readable form: '),
                    op=Add(),
                    right=Name(id='ast_string', ctx=Load()))],
                keywords=[])),
            Assign(
              targets=[
                Name(id='astfile', ctx=Store())],
              value=Call(
                func=Name(id='open', ctx=Load()),
                args=[
                  Constant(value='ast.txt'),
                  Constant(value='w')],
                keywords=[])),
            Expr(
              value=Call(
                func=Attribute(
                  value=Name(id='astfile', ctx=Load()),
                  attr='write',
                  ctx=Load()),
                args=[
                  Name(id='ast_string', ctx=Load())],
                keywords=[])),
            Expr(
              value=Attribute(
                value=Name(id='astfile', ctx=Load()),
                attr='close',
                ctx=Load())),
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='message')],
                        values=[
                          Constant(value='File successfully uploaded')])],
                    keywords=[]),
                  Constant(value=200)],
                ctx=Load()))],
          orelse=[])],
      decorator_list=[
        Call(
          func=Attribute(
            value=Name(id='app', ctx=Load()),
            attr='route',
            ctx=Load()),
          args=[
            Constant(value='/api/code')],
          keywords=[
            keyword(
              arg='methods',
              value=List(
                elts=[
                  Constant(value='GET'),
                  Constant(value='POST')],
                ctx=Load()))])]),
    FunctionDef(
      name='handle_query',
      args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        Global(
          names=[
            'code_ctx']),
        Assign(
          targets=[
            Name(id='data', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='request', ctx=Load()),
              attr='get_json',
              ctx=Load()),
            args=[],
            keywords=[])),
        If(
          test=Compare(
            left=Constant(value='messages'),
            ops=[
              NotIn()],
            comparators=[
              Name(id='data', ctx=Load())]),
          body=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          Constant(value='No messages provided')])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))],
          orelse=[]),
        Assign(
          targets=[
            Name(id='messages', ctx=Store())],
          value=Subscript(
            value=Name(id='data', ctx=Load()),
            slice=Constant(value='messages'),
            ctx=Load())),
        Assign(
          targets=[
            Name(id='user_messages', ctx=Store())],
          value=ListComp(
            elt=Name(id='message', ctx=Load()),
            generators=[
              comprehension(
                target=Name(id='message', ctx=Store()),
                iter=Name(id='messages', ctx=Load()),
                ifs=[
                  Compare(
                    left=Subscript(
                      value=Name(id='message', ctx=Load()),
                      slice=Constant(value='role'),
                      ctx=Load()),
                    ops=[
                      Eq()],
                    comparators=[
                      Constant(value='user')])],
                is_async=0)])),
        If(
          test=UnaryOp(
            op=Not(),
            operand=Name(id='user_messages', ctx=Load())),
          body=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          Constant(value='No user messages provided')])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))],
          orelse=[]),
        Assign(
          targets=[
            Name(id='query', ctx=Store())],
          value=Subscript(
            value=Subscript(
              value=Name(id='user_messages', ctx=Load()),
              slice=UnaryOp(
                op=USub(),
                operand=Constant(value=1)),
              ctx=Load()),
            slice=Constant(value='message'),
            ctx=Load())),
        Assign(
          targets=[
            Name(id='endpoint', ctx=Store())],
          value=Constant(value='https://smartprompt-globaldev.zoomdev.us/v1/zoom-ai-hackathon/invoke')),
        Assign(
          targets=[
            Name(id='headers', ctx=Store())],
          value=Dict(
            keys=[
              Constant(value='Content-Type'),
              Constant(value='Authorization')],
            values=[
              Constant(value='application/json'),
              Constant(value='Bearer eyJhbGciOiJFUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJpbnRlZ3JhdGlvbi1hZGxlciIsImF1ZCI6InNtYXJ0X3Byb21wdCIsImV4cCI6MTY4ODQ5MDcwMX0.KYfmZ_HuQDd5Yhe0IXpkWWLJqkJ0ZHdjkkYPvWxJhN9fxru7iIRCZqd8BY8UBub7eovWhDxNIucoS1Dd5wj4LQ')])),
        Assign(
          targets=[
            Name(id='data', ctx=Store())],
          value=Dict(
            keys=[
              Constant(value='messages'),
              Constant(value='model'),
              Constant(value='task_id'),
              Constant(value='user_name')],
            values=[
              List(
                elts=[
                  Dict(
                    keys=[
                      Constant(value='role'),
                      Constant(value='message')],
                    values=[
                      Constant(value='user'),
                      Name(id='query', ctx=Load())])],
                ctx=Load()),
              Constant(value='claude-instant-v1'),
              Constant(value='1'),
              Constant(value='test')])),
        Assign(
          targets=[
            Name(id='response', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='requests', ctx=Load()),
              attr='post',
              ctx=Load()),
            args=[
              Subscript(
                value=Name(id='data', ctx=Load()),
                slice=Constant(value='task_id'),
                ctx=Load()),
              Subscript(
                value=Name(id='data', ctx=Load()),
                slice=Constant(value='user_name'),
                ctx=Load()),
              Subscript(
                value=Name(id='data', ctx=Load()),
                slice=Constant(value='model'),
                ctx=Load()),
              Name(id='query', ctx=Load()),
              Name(id='code_ctx', ctx=Load())],
            keywords=[])),
        Assign(
          targets=[
            Name(id='response', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='requests', ctx=Load()),
              attr='post',
              ctx=Load()),
            args=[
              Name(id='endpoint', ctx=Load())],
            keywords=[
              keyword(
                arg='headers',
                value=Name(id='headers', ctx=Load())),
              keyword(
                arg='data',
                value=Call(
                  func=Attribute(
                    value=Name(id='json', ctx=Load()),
                    attr='dumps',
                    ctx=Load()),
                  args=[
                    Name(id='data', ctx=Load())],
                  keywords=[]))])),
        If(
          test=Compare(
            left=Attribute(
              value=Name(id='response', ctx=Load()),
              attr='status_code',
              ctx=Load()),
            ops=[
              Eq()],
            comparators=[
              Constant(value=200)]),
          body=[
            Assign(
              targets=[
                Name(id='resultjson', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='response', ctx=Load()),
                  attr='json',
                  ctx=Load()),
                args=[],
                keywords=[])),
            Assign(
              targets=[
                Name(id='result', ctx=Store())],
              value=Call(
                func=Attribute(
                  value=Name(id='resultjson', ctx=Load()),
                  attr='get',
                  ctx=Load()),
                args=[
                  Constant(value='result'),
                  Constant(value='No Response Found')],
                keywords=[])),
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Name(id='result', ctx=Load())],
                    keywords=[]),
                  Constant(value=200)],
                ctx=Load()))],
          orelse=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          BinOp(
                            left=Constant(value='An error occurred: '),
                            op=Add(),
                            right=Attribute(
                              value=Name(id='response', ctx=Load()),
                              attr='text',
                              ctx=Load()))])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))])],
      decorator_list=[
        Call(
          func=Attribute(
            value=Name(id='app', ctx=Load()),
            attr='route',
            ctx=Load()),
          args=[
            Constant(value='/api/query')],
          keywords=[
            keyword(
              arg='methods',
              value=List(
                elts=[
                  Constant(value='POST')],
                ctx=Load()))])]),
    FunctionDef(
      name='handle_answer',
      args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        Assign(
          targets=[
            Name(id='data', ctx=Store())],
          value=Call(
            func=Attribute(
              value=Name(id='request', ctx=Load()),
              attr='get_json',
              ctx=Load()),
            args=[],
            keywords=[])),
        If(
          test=BoolOp(
            op=Or(),
            values=[
              Compare(
                left=Constant(value='query'),
                ops=[
                  NotIn()],
                comparators=[
                  Name(id='data', ctx=Load())]),
              Compare(
                left=Constant(value='code'),
                ops=[
                  NotIn()],
                comparators=[
                  Name(id='data', ctx=Load())])]),
          body=[
            Return(
              value=Tuple(
                elts=[
                  Call(
                    func=Name(id='jsonify', ctx=Load()),
                    args=[
                      Dict(
                        keys=[
                          Constant(value='error')],
                        values=[
                          Constant(value='The request must contain a query and code')])],
                    keywords=[]),
                  Constant(value=400)],
                ctx=Load()))],
          orelse=[]),
        Assign(
          targets=[
            Name(id='query', ctx=Store())],
          value=Subscript(
            value=Name(id='data', ctx=Load()),
            slice=Constant(value='query'),
            ctx=Load())),
        Assign(
          targets=[
            Name(id='code', ctx=Store())],
          value=Subscript(
            value=Name(id='data', ctx=Load()),
            slice=Constant(value='code'),
            ctx=Load())),
        Assign(
          targets=[
            Name(id='answer', ctx=Store())],
          value=Constant(value='Generated answer goes here.')),
        Return(
          value=Tuple(
            elts=[
              Call(
                func=Name(id='jsonify', ctx=Load()),
                args=[
                  Dict(
                    keys=[
                      Constant(value='answer')],
                    values=[
                      Name(id='answer', ctx=Load())])],
                keywords=[]),
              Constant(value=200)],
            ctx=Load()))],
      decorator_list=[
        Call(
          func=Attribute(
            value=Name(id='app', ctx=Load()),
            attr='route',
            ctx=Load()),
          args=[
            Constant(value='/api/answer')],
          keywords=[
            keyword(
              arg='methods',
              value=List(
                elts=[
                  Constant(value='POST')],
                ctx=Load()))])]),
    If(
      test=Compare(
        left=Name(id='__name__', ctx=Load()),
        ops=[
          Eq()],
        comparators=[
          Constant(value='__main__')]),
      body=[
        Expr(
          value=Call(
            func=Attribute(
              value=Name(id='app', ctx=Load()),
              attr='run',
              ctx=Load()),
            args=[],
            keywords=[
              keyword(
                arg='debug',
                value=Constant(value=True))]))],
      orelse=[])],
  type_ignores=[])